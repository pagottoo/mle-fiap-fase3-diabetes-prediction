"""
Dashboard de Avalia√ß√£o de Indicadores de Sa√∫de para Diabetes
Aplica√ß√£o Streamlit para predi√ß√£o e an√°lise de risco de diabetes.
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
import json
import os
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import io
import base64
from typing import Dict, Any, Optional, List

# Configuration
API_URL = os.getenv("API_URL", "http://localhost:8000")
st.set_page_config(
    page_title="Avalia√ß√£o de Indicadores de Diabetes",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .risk-high {
        background-color: #ffebee;
        border-left: 5px solid #f44336;
        padding: 1rem;
        border-radius: 0.25rem;
    }
    .risk-medium {
        background-color: #fff3e0;
        border-left: 5px solid #ff9800;
        padding: 1rem;
        border-radius: 0.25rem;
    }
    .risk-low {
        background-color: #e8f5e8;
        border-left: 5px solid #4caf50;
        padding: 1rem;
        border-radius: 0.25rem;
    }
</style>
""", unsafe_allow_html=True)


def call_api(endpoint: str, method: str = "GET", data: Dict = None, params: Dict = None) -> Dict[str, Any]:
    """Make API call to backend service."""
    url = f"{API_URL}{endpoint}"
    
    try:
        if method == "GET":
            response = requests.get(url, params=params, timeout=30)
        elif method == "POST":
            response = requests.post(url, json=data, params=params, timeout=30)
        
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {
                "success": False, 
                "error": f"API Error {response.status_code}: {response.text}"
            }
    except requests.exceptions.ConnectionError:
        return {"success": False, "error": "Cannot connect to API. Is the server running?"}
    except requests.exceptions.Timeout:
        return {"success": False, "error": "API request timeout"}
    except Exception as e:
        return {"success": False, "error": f"Unexpected error: {str(e)}"}


def show_api_status():
    """Display API connection status in sidebar."""
    with st.sidebar:
        st.subheader("üîó Status da API")
        
        # Test API connection
        result = call_api("/status")
        
        if result["success"]:
            st.success("Conectado")
            st.caption(f"API: {API_URL}")
            
            # Show model status
            data = result["data"]
            st.write("**Status do Modelo:**")
            st.write(f"- ML Dispon√≠vel: {'Sim' if data.get('ml_available') else 'N√£o'}")
            st.write(f"- Modelo Treinado: {'Sim' if data.get('model_trained') else 'N√£o'}")
            
        else:
            st.error("Desconectado")
            st.caption(f"Erro: {result['error']}")


def diabetes_prediction_form():
    """Create the diabetes prediction form."""
    st.markdown('<h1 class="main-header">ü©∫ Avalia√ß√£o de Risco de Diabetes</h1>', unsafe_allow_html=True)
    
    st.markdown("""
    ### Predi√ß√£o de Indicadores de Sa√∫de para Diabetes
    Esta ferramenta usa aprendizado de m√°quina para avaliar o risco de diabetes baseado em v√°rios indicadores de sa√∫de.
    Preencha o formul√°rio abaixo para obter uma avalia√ß√£o personalizada de risco.
    """)
    
    # Create form columns
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã Informa√ß√µes Demogr√°ficas")
        
        age_category = st.selectbox(
            "Categoria de Idade",
            options=list(range(1, 14)),
            format_func=lambda x: {
                1: "18-24", 2: "25-29", 3: "30-34", 4: "35-39", 5: "40-44",
                6: "45-49", 7: "50-54", 8: "55-59", 9: "60-64", 10: "65-69",
                11: "70-74", 12: "75-79", 13: "80+"
            }[x],
            help="Selecione sua categoria de idade"
        )
        
        sex = st.selectbox(
            "Sexo",
            options=[0, 1],
            format_func=lambda x: "Feminino" if x == 0 else "Masculino",
            help="Sexo biol√≥gico"
        )
        
        race = st.selectbox(
            "Ra√ßa/Etnia",
            options=list(range(1, 7)),
            format_func=lambda x: {
                1: "Branca", 2: "Negra", 3: "Asi√°tica", 4: "Ind√≠gena Americana/Nativa do Alasca",
                5: "Hisp√¢nica", 6: "Outra"
            }[x],
            help="Categoria de ra√ßa/etnia"
        )
        
        education = st.selectbox(
            "N√≠vel Educacional",
            options=list(range(1, 7)),
            format_func=lambda x: {
                1: "Nunca frequentou escola", 2: "Ensino Fundamental 1-8",
                3: "Ensino M√©dio 9-11", 4: "Ensino M√©dio completo", 
                5: "Ensino Superior 1-3 anos", 6: "Ensino Superior 4+ anos"
            }[x],
            help="Maior n√≠vel educacional completado"
        )
        
        income = st.selectbox(
            "N√≠vel de Renda",
            options=list(range(1, 9)),
            format_func=lambda x: {
                1: "Menos de $10,000", 2: "$10,000-$14,999", 3: "$15,000-$19,999",
                4: "$20,000-$24,999", 5: "$25,000-$34,999", 6: "$35,000-$49,999",
                7: "$50,000-$74,999", 8: "$75,000 ou mais"
            }[x],
            help="Faixa de renda anual familiar"
        )
        
        st.subheader("üè• Medidas de Sa√∫de")
        
        bmi = st.slider(
            "IMC (√çndice de Massa Corporal)",
            min_value=10.0, max_value=100.0, value=25.0, step=0.1,
            help="C√°lculo do IMC: peso(kg) / altura(m)¬≤"
        )
        
        gen_health = st.selectbox(
            "Sa√∫de Geral",
            options=[1, 2, 3, 4, 5],
            format_func=lambda x: {1: "Excelente", 2: "Muito Boa", 3: "Boa", 4: "Regular", 5: "Ruim"}[x],
            help="Avalia√ß√£o geral da sa√∫de"
        )
        
        physical_health = st.slider(
            "Sa√∫de F√≠sica (dias ruins nos √∫ltimos 30)",
            min_value=0, max_value=30, value=0, step=1,
            help="N√∫mero de dias em que a sa√∫de f√≠sica n√£o estava boa"
        )
        
        mental_health = st.slider(
            "Sa√∫de Mental (dias ruins nos √∫ltimos 30)",
            min_value=0, max_value=30, value=0, step=1,
            help="N√∫mero de dias em que a sa√∫de mental n√£o estava boa"
        )
        
        sleep_time = st.slider(
            "Horas de Sono",
            min_value=1, max_value=24, value=8, step=1,
            help="M√©dia de horas de sono por noite"
        )
        
        st.subheader("üè• Acesso √† Sa√∫de")
        
        any_healthcare = st.selectbox(
            "Tem Plano de Sa√∫de",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Tem algum tipo de cobertura de sa√∫de"
        )
        
        no_docbc_cost = st.selectbox(
            "Deixou de Ver M√©dico por Custo",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Houve momento em que precisou de m√©dico mas n√£o foi por custo"
        )
    
    with col2:
        st.subheader("üö≠ Fatores de Estilo de Vida")
        
        smoking = st.selectbox(
            "Tabagismo",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Voc√™ fumou pelo menos 100 cigarros em toda sua vida?"
        )
        
        alcohol_drinking = st.selectbox(
            "Consumo Excessivo de √Ålcool",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Bebedores pesados (homens ‚â•14 drinks/semana, mulheres ‚â•7 drinks/semana)"
        )
        
        physical_activity = st.selectbox(
            "Atividade F√≠sica",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Atividade f√≠sica nos √∫ltimos 30 dias (n√£o incluindo trabalho)"
        )
        
        fruits = st.selectbox(
            "Consumo de Frutas",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Consome frutas 1 ou mais vezes por dia"
        )
        
        veggies = st.selectbox(
            "Consumo de Vegetais",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",  
            help="Consome vegetais 1 ou mais vezes por dia"
        )
        
        st.subheader("üè• Condi√ß√µes M√©dicas")
        
        stroke = st.selectbox(
            "Teve AVC",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="J√° foi informado que teve um AVC"
        )
        
        heart_disease_or_attack = st.selectbox(
            "Doen√ßa Card√≠aca ou Infarto",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Doen√ßa coronariana ou infarto do mioc√°rdio"
        )
        
        high_bp = st.selectbox(
            "Press√£o Alta",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="J√° foi informado que tem press√£o alta"
        )
        
        high_chol = st.selectbox(
            "Colesterol Alto",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="J√° foi informado que tem colesterol alto no sangue"
        )
        
        chol_check = st.selectbox(
            "Exame de Colesterol",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Fez exame de colesterol nos √∫ltimos 5 anos"
        )
        
        diff_walking = st.selectbox(
            "Dificuldade para Caminhar",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="Dificuldade s√©ria para caminhar ou subir escadas"
        )
        
        asthma = st.selectbox(
            "Asma",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="J√° foi informado que tem asma"
        )
        
        kidney_disease = st.selectbox(
            "Doen√ßa Renal",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="J√° foi informado que tem doen√ßa renal"
        )
        
        skin_cancer = st.selectbox(
            "C√¢ncer de Pele",
            options=[0, 1],
            format_func=lambda x: "N√£o" if x == 0 else "Sim",
            help="J√° foi informado que tem c√¢ncer de pele"
        )
        
        diabetic = st.selectbox(
            "Status Pr√©-diab√©tico",
            options=[0, 1, 2, 3, 4],
            format_func=lambda x: {
                0: "N√£o", 1: "Pr√©-diabetes", 2: "Sim", 3: "Sim, durante gravidez", 4: "N√£o, diabetes lim√≠trofe"
            }[x],
            help="Condi√ß√£o diab√©tica pr√©-existente"
        )
    
    # Prediction section
    st.markdown("---")
    col1, col2, col3 = st.columns([2, 1, 2])
    
    with col2:
        predict_button = st.button("üîç Predizer Risco de Diabetes", type="primary", use_container_width=True)
    
    if predict_button:
        # Prepare data for prediction
        patient_data = {
            "high_bp": high_bp,
            "high_chol": high_chol,
            "chol_check": chol_check,
            "bmi": bmi,
            "smoker": smoking,
            "stroke": stroke,
            "heart_disease_or_attack": heart_disease_or_attack,
            "phys_activity": physical_activity,
            "fruits": fruits,
            "veggies": veggies,
            "hvy_alcohol_consump": alcohol_drinking,
            "any_healthcare": any_healthcare,
            "no_docbc_cost": no_docbc_cost,
            "gen_hlth": gen_health,
            "ment_hlth": mental_health,
            "phys_hlth": physical_health,
            "diff_walking": diff_walking,
            "sex": sex,
            "age": age_category,
            "education": education,
            "income": income
        }
        
        # Make prediction
        with st.spinner("Analisando indicadores de sa√∫de..."):
            result = call_api("/predict", method="POST", data=patient_data)
        
        if result["success"]:
            prediction = result["data"]
            
            # Display results
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                probability = prediction["probability"]
                risk_level = prediction["risk_level"]
                class_prediction = prediction["class_prediction"]
                
                # Create risk level styling
                if risk_level.lower() == "high":
                    risk_class = "risk-high"
                    risk_emoji = "üî¥"
                elif risk_level.lower() == "medium":
                    risk_class = "risk-medium"
                    risk_emoji = "üü°"
                else:
                    risk_class = "risk-low"
                    risk_emoji = "üü¢"
                
                st.markdown(f"""
                <div class="{risk_class}">
                    <h3>{risk_emoji} N√≠vel de Risco: {risk_level}</h3>
                    <p><strong>Probabilidade de Risco de Diabetes:</strong> {probability:.1%}</p>
                    <p><strong>Predi√ß√£o:</strong> {'Risco de Diabetes' if class_prediction == 1 else 'Sem Risco de Diabetes'}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Show top features if available
                if prediction.get("top_features"):
                    st.subheader("üìä Principais Fatores de Risco")
                    
                    features_df = pd.DataFrame(prediction["top_features"])
                    if not features_df.empty:
                        fig = px.bar(
                            features_df,
                            x="abs_shap_value",
                            y="feature",
                            orientation="h",
                            title="Principais Fatores Contribuintes",
                            color="abs_shap_value",
                            color_continuous_scale="RdYlBu_r"
                        )
                        fig.update_layout(height=400)
                        st.plotly_chart(fig, use_container_width=True)
        else:
            st.error(f"Predi√ß√£o falhou: {result['error']}")


def data_management_page():
    """Data management interface."""
    st.markdown('<h1 class="main-header">üìä Gerenciamento de Dados</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs(["üì§ Upload de Dados", "üéØ Treinamento do Modelo", "üìà M√©tricas do Modelo", "üîÑ Reset do Sistema"])
    
    with tab1:
        st.subheader("Upload de Dados de Diabetes")
        
        uploaded_file = st.file_uploader(
            "Escolha um arquivo CSV",
            type="csv",
            help="Fa√ßa upload de um arquivo CSV com dados de indicadores de sa√∫de para diabetes"
        )
        
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                st.success(f"Arquivo enviado com sucesso! Formato: {df.shape}")
                
                # Show preview
                st.subheader("Data Preview")
                st.dataframe(df.head())
                
                # Upload to API
                if st.button("üì§ Upload to Database"):
                    with st.spinner("Uploading data..."):
                        # Map column names from CSV format to API format
                        column_mapping = {
                            'Diabetes_binary': 'diabetes_binary',
                            'HighBP': 'high_bp',
                            'HighChol': 'high_chol', 
                            'CholCheck': 'chol_check',
                            'BMI': 'bmi',
                            'Smoker': 'smoker',
                            'Stroke': 'stroke',
                            'HeartDiseaseorAttack': 'heart_disease_or_attack',
                            'PhysActivity': 'phys_activity',
                            'Fruits': 'fruits',
                            'Veggies': 'veggies',
                            'HvyAlcoholConsump': 'hvy_alcohol_consump',
                            'AnyHealthcare': 'any_healthcare',
                            'NoDocbcCost': 'no_docbc_cost',
                            'GenHlth': 'gen_hlth',
                            'MentHlth': 'ment_hlth',
                            'PhysHlth': 'phys_hlth',
                            'DiffWalk': 'diff_walking',
                            'Sex': 'sex',
                            'Age': 'age',
                            'Education': 'education',
                            'Income': 'income'
                        }
                        
                        # Apply column mapping
                        df_mapped = df.rename(columns=column_mapping)
                        
                        # Convert DataFrame to records and upload
                        records = df_mapped.to_dict('records')
                        
                        success_count = 0
                        error_count = 0
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, record in enumerate(records):
                            result = call_api("/ingest/record", method="POST", data=record)
                            
                            if result["success"]:
                                success_count += 1
                            else:
                                error_count += 1
                            
                            # Update progress
                            progress = (i + 1) / len(records)
                            progress_bar.progress(progress)
                            status_text.text(f"Processados {i+1}/{len(records)} registros")
                        
                        st.success(f"Upload conclu√≠do! Sucessos: {success_count}, Erros: {error_count}")
                        
            except Exception as e:
                st.error(f"Erro ao processar arquivo: {str(e)}")
    
    with tab2:
        st.subheader("Treinar Modelo de Predi√ß√£o de Diabetes")
        
        st.markdown("""
        Treine um novo modelo de aprendizado de m√°quina usando os dados enviados.
        Este processo pode levar v√°rios minutos dependendo do tamanho do dataset.
        """)
        
        if st.button("üéØ Iniciar Treinamento"):
            with st.spinner("Treinando modelo..."):
                result = call_api("/train", method="POST")
            
            if result["success"]:
                training_result = result["data"]
                st.success("Treinamento do modelo conclu√≠do!")
                
                # Show data info if available
                if training_result.get("training_records") or training_result.get("data_source"):
                    st.info(f"""
                    **üìä Informa√ß√µes dos Dados de Treinamento:**
                    - **Fonte**: {training_result.get('data_source', 'N/A')}
                    - **Registros para treinamento**: {training_result.get('training_records', 'N/A'):,}
                    - **Tempo de treinamento**: {training_result.get('training_time', 0):.1f}s
                    """)
                
                if training_result.get("metrics"):
                    st.subheader("Resultados do Treinamento")
                    metrics = training_result["metrics"]
                    
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("Acur√°cia", f"{metrics.get('accuracy', 0):.3f}")
                    with col2:
                        st.metric("Precis√£o", f"{metrics.get('precision', 0):.3f}")
                    with col3:
                        st.metric("Recall", f"{metrics.get('recall', 0):.3f}")
                    with col4:
                        st.metric("F1 Score", f"{metrics.get('f1', 0):.3f}")
            else:
                st.error(f"Treinamento falhou: {result['error']}")
    
    with tab3:
        st.subheader("M√©tricas de Performance do Modelo")
        
        # Get current metrics
        result = call_api("/metrics")
        
        if result["success"] and result["data"].get("metrics"):
            # Use the main model metrics (not baseline)
            metrics_data = result["data"]["metrics"].get("metrics", {})
            main_metrics = metrics_data.get("main", {})
            baseline_metrics = metrics_data.get("baseline", {})
            data_info = result["data"]["metrics"].get("data_info", {})
            
            if main_metrics:
                # Show data information if available
                if data_info:
                    st.success(f"""
                    **üìä Informa√ß√µes do Dataset de Treinamento:**
                    - **Fonte dos dados**: {data_info.get('source', 'N/A')}
                    - **Total de registros**: {data_info.get('total_records', 'N/A'):,}
                    - **Registros de treinamento**: {data_info.get('train_records', 'N/A'):,}
                    - **Registros de valida√ß√£o**: {data_info.get('validation_records', 'N/A'):,}
                    - **Registros de teste**: {data_info.get('test_records', 'N/A'):,}
                    """)
                
                st.info("**M√©tricas do Modelo Principal (XGBoost)**")
                
                # Display key metrics
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Acur√°cia", f"{main_metrics.get('accuracy', 0):.3f}")
                with col2:
                    st.metric("Precis√£o", f"{main_metrics.get('precision', 0):.3f}")
                with col3:
                    st.metric("Recall", f"{main_metrics.get('recall', 0):.3f}")
                with col4:
                    st.metric("F1 Score", f"{main_metrics.get('f1', 0):.3f}")
                
                # Additional metrics row
                col5, col6, col7, col8 = st.columns(4)
                with col5:
                    st.metric("AUC-ROC", f"{main_metrics.get('roc_auc', 0):.3f}")
                with col6:
                    st.metric("Especificidade", f"{main_metrics.get('specificity', 0):.3f}")
                with col7:
                    st.metric("VP", f"{main_metrics.get('true_positives', 0)}")
                with col8:
                    st.metric("VN", f"{main_metrics.get('true_negatives', 0)}")
                
                # Comparison with baseline if available
                if baseline_metrics:
                    st.subheader("üìä Compara√ß√£o com Baseline")
                    
                    comparison_data = {
                        'M√©trica': ['Acur√°cia', 'Precis√£o', 'Recall', 'F1-Score', 'AUC-ROC'],
                        'Modelo Principal': [
                            main_metrics.get('accuracy', 0),
                            main_metrics.get('precision', 0), 
                            main_metrics.get('recall', 0),
                            main_metrics.get('f1', 0),
                            main_metrics.get('roc_auc', 0)
                        ],
                        'Baseline': [
                            baseline_metrics.get('accuracy', 0),
                            baseline_metrics.get('precision', 0),
                            baseline_metrics.get('recall', 0), 
                            baseline_metrics.get('f1', 0),
                            baseline_metrics.get('roc_auc', 0)
                        ]
                    }
                    
                    comparison_df = pd.DataFrame(comparison_data)
                    st.dataframe(comparison_df, use_container_width=True)
                
                # Confusion Matrix for main model
                st.subheader("üîç Matriz de Confus√£o")
                
                # Build confusion matrix from individual metrics
                tn = main_metrics.get('true_negatives', 0)
                fp = main_metrics.get('false_positives', 0) 
                fn = main_metrics.get('false_negatives', 0)
                tp = main_metrics.get('true_positives', 0)
                
                cm = np.array([[tn, fp], [fn, tp]])
                
                fig = px.imshow(
                    cm,
                    text_auto=True,
                    aspect="auto",
                    title="Matriz de Confus√£o - Modelo Principal",
                    labels=dict(x="Predito", y="Real"),
                    x=['Sem Diabetes', 'Com Diabetes'],
                    y=['Sem Diabetes', 'Com Diabetes'],
                    color_continuous_scale="Blues"
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Add interpretation
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Verdadeiros Negativos (VN)", tn)
                    st.metric("Falsos Negativos (FN)", fn)
                with col2:
                    st.metric("Falsos Positivos (FP)", fp)
                    st.metric("Verdadeiros Positivos (VP)", tp)
        else:
            st.info("M√©tricas do modelo n√£o dispon√≠veis. Treine um modelo primeiro.")
    
    with tab4:
        st.subheader("üîÑ Reset Completo do Sistema")
        
        st.markdown("""
        ‚ö†Ô∏è **ATEN√á√ÉO**: Esta opera√ß√£o ir√° **apagar todos os dados** e **remover o modelo treinado**.
        
        Use esta funcionalidade para:
        - üßπ Limpar completamente o sistema
        - üîÑ Come√ßar do zero com novos dados  
        - üß™ Experimentar com datasets diferentes
        - üêõ Resolver problemas de corrup√ß√£o de dados
        """)
        
        # Reset options
        st.markdown("### Op√ß√µes de Reset")
        
        col1, col2 = st.columns(2)
        with col1:
            reset_data = st.checkbox(
                "üóÉÔ∏è Limpar dados do banco",
                value=True,
                help="Remove todos os registros das tabelas diabetes_raw e models"
            )
        with col2:
            reset_model = st.checkbox(
                "ü§ñ Remover modelo treinado",
                value=True, 
                help="Remove arquivos model.pkl, metrics.json e outros artefatos"
            )
        
        if not (reset_data or reset_model):
            st.warning("‚ö†Ô∏è Selecione pelo menos uma op√ß√£o de reset.")
        else:
            # Safety confirmation
            st.markdown("### üõ°Ô∏è Confirma√ß√£o de Seguran√ßa")
            
            confirm_text = st.text_input(
                "Digite 'RESET' para confirmar:",
                placeholder="RESET",
                help="Digite exatamente 'RESET' em mai√∫sculas para confirmar"
            )
            
            if confirm_text == "RESET":
                st.success("‚úÖ Confirma√ß√£o v√°lida")
                
                # Reset button
                if st.button("üîÑ **EXECUTAR RESET COMPLETO**", type="primary"):
                    with st.spinner("Executando reset do sistema..."):
                        # Call reset API
                        reset_data_payload = {
                            "confirm": True,
                            "reset_data": reset_data,
                            "reset_model": reset_model
                        }
                        
                        result = call_api("/reset", method="POST", data=reset_data_payload)
                    
                    if result["success"]:
                        reset_result = result["data"]
                        
                        st.success("üéâ **Reset executado com sucesso!**")
                        
                        # Show results
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("üìä Registros Removidos", reset_result.get("deleted_records", 0))
                        with col2:
                            st.metric("ü§ñ Modelos Removidos", reset_result.get("deleted_models", 0))
                        with col3:
                            artifacts = reset_result.get("artifacts_removed", [])
                            st.metric("üìÅ Artefatos Removidos", len(artifacts))
                        
                        if artifacts:
                            st.info(f"**Artefatos removidos:** {', '.join(artifacts)}")
                        
                        # Instructions for next steps
                        st.markdown("""
                        ### üöÄ Pr√≥ximos Passos:
                        1. **Upload novos dados** na aba "üì§ Upload de Dados"
                        2. **Treinar novo modelo** na aba "üéØ Treinamento do Modelo" 
                        3. **Verificar m√©tricas** na aba "üìà M√©tricas do Modelo"
                        """)
                        
                        # Auto-refresh after reset to update UI
                        st.rerun()
                    else:
                        st.error(f"‚ùå Reset falhou: {result['error']}")
            
            elif confirm_text and confirm_text != "RESET":
                st.error("‚ùå Confirma√ß√£o inv√°lida. Digite exatamente 'RESET'")
            else:
                st.info("üîí Digite 'RESET' para habilitar o bot√£o de reset")


def data_analysis_page():
    """Data analysis page with matplotlib visualizations."""
    st.markdown('<h1 class="main-header">üìà An√°lise de Dados de Diabetes</h1>', unsafe_allow_html=True)
    
    st.markdown("""
    ### Visualiza√ß√µes Interativas dos Dados de Sa√∫de
    Esta p√°gina oferece an√°lises visuais dos dados (amostragem) de diabetes usando gr√°ficos estat√≠sticos.
    """)
    
    # Get data from API
    with st.spinner("Carregando dados..."):
        result = call_api("/records", params={"limit": 10000})
        
        if not result["success"]:
            st.error(f"Erro ao carregar dados: {result['error']}")
            st.info("Certifique-se de que h√° dados no banco e que a API est√° funcionando.")
            return
        
        data = result["data"]
        records = data.get("records", [])
        if not records or len(records) == 0:
            st.warning("Nenhum dado encontrado no banco de dados.")
            st.info("Importe dados na p√°gina 'Gerenciamento de Dados' primeiro.")
            return
        
        df = pd.DataFrame(records)
        st.success(f"Ok: {len(df)} registros carregados com sucesso!")
    
    # Sidebar filters
    with st.sidebar:
        st.header("üîß Filtros de An√°lise")
        
        # Age filter
        age_options = sorted(df['age'].unique())
        age_range = st.slider(
            "Faixa Et√°ria",
            min_value=int(min(age_options)),
            max_value=int(max(age_options)),
            value=(int(min(age_options)), int(max(age_options))),
            help="Selecione a faixa et√°ria para an√°lise"
        )
        
        # BMI filter
        bmi_range = st.slider(
            "√çndice de Massa Corporal (BMI)",
            min_value=float(df['bmi'].min()),
            max_value=float(df['bmi'].max()),
            value=(float(df['bmi'].min()), float(df['bmi'].max())),
            format="%.1f",
            help="Selecione a faixa de BMI para an√°lise"
        )
        
        # Sex filter
        sex_filter = st.selectbox(
            "Sexo",
            options=["Todos", "Feminino", "Masculino"],
            help="Filtrar por sexo"
        )
    
    # Apply filters
    filtered_df = df[
        (df['age'] >= age_range[0]) & 
        (df['age'] <= age_range[1]) &
        (df['bmi'] >= bmi_range[0]) & 
        (df['bmi'] <= bmi_range[1])
    ]
    
    if sex_filter != "Todos":
        sex_value = 0 if sex_filter == "Feminino" else 1
        filtered_df = filtered_df[filtered_df['sex'] == sex_value]
    
    if len(filtered_df) == 0:
        st.warning("‚ö†Ô∏è Nenhum dado encontrado com os filtros aplicados.")
        return
    
    # Display filtered data metrics
    col_info1, col_info2, col_info3, col_info4 = st.columns(4)
    
    with col_info1:
        st.metric("Total de Registros", len(filtered_df))
    
    with col_info2:
        diabetes_rate = (filtered_df['diabetes_binary'].mean() * 100)
        st.metric("Taxa de Diabetes", f"{diabetes_rate:.1f}%")
    
    with col_info3:
        avg_bmi = filtered_df['bmi'].mean()
        st.metric("BMI M√©dio", f"{avg_bmi:.1f}")
    
    with col_info4:
        high_risk = filtered_df[
            (filtered_df['high_bp'] == 1) & 
            (filtered_df['high_chol'] == 1)
        ]['diabetes_binary'].mean() * 100
        st.metric("Alto Risco (%)", f"{high_risk:.1f}%")
    
    # Create visualizations
    st.markdown("---")
    
    # Row 1: BMI Distribution and Risk Factors
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Distribui√ß√£o de BMI por Status de Diabetes")
        
        fig1, ax1 = plt.subplots(figsize=(10, 6))
        
        # Create histograms
        no_diabetes = filtered_df[filtered_df['diabetes_binary'] == 0]['bmi']
        with_diabetes = filtered_df[filtered_df['diabetes_binary'] == 1]['bmi']
        
        # Only create histogram if we have data
        if len(no_diabetes) > 0:
            ax1.hist(no_diabetes, alpha=0.7, label='Sem Diabetes', bins=min(30, len(no_diabetes)//2 + 1), color='lightblue', density=True)
        if len(with_diabetes) > 0:
            ax1.hist(with_diabetes, alpha=0.7, label='Com Diabetes', bins=min(30, len(with_diabetes)//2 + 1), color='salmon', density=True)
        
        ax1.set_xlabel('√çndice de Massa Corporal (BMI)')
        ax1.set_ylabel('Densidade')
        ax1.set_title('Distribui√ß√£o de BMI por Status de Diabetes')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        st.pyplot(fig1)
        plt.close(fig1)
    
    with col2:
        st.subheader("üéØ Taxa de Diabetes por Fatores de Risco")
        
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        
        # Risk factors analysis
        risk_factors = {
            'Press√£o Alta': 'high_bp',
            'Colesterol Alto': 'high_chol', 
            'Fumante': 'smoker',
            'AVC': 'stroke',
            'Doen√ßa Card√≠aca': 'heart_disease_or_attack',
            'Atividade F√≠sica': 'phys_activity'
        }
        
        diabetes_rates = []
        factor_names = []
        
        for name, column in risk_factors.items():
            if column in filtered_df.columns:
                rate = filtered_df[filtered_df[column] == 1]['diabetes_binary'].mean() * 100
                diabetes_rates.append(rate)
                factor_names.append(name)
        
        bars = ax2.bar(factor_names, diabetes_rates, color='coral')
        ax2.set_title('Taxa de Diabetes por Fator de Risco (%)')
        ax2.set_ylabel('Taxa de Diabetes (%)')
        ax2.tick_params(axis='x', rotation=45)
        
        # Add values on bars
        for bar, rate in zip(bars, diabetes_rates):
            ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
                    f'{rate:.1f}%', ha='center', va='bottom')
        
        plt.tight_layout()
        st.pyplot(fig2)
        plt.close(fig2)
    
    # Row 2: Age Distribution and Correlation Heatmap
    st.markdown("---")
    
    col3, col4 = st.columns(2)
    
    with col3:
        st.subheader("üë• Distribui√ß√£o por Faixa Et√°ria")
        
        fig3, ax3 = plt.subplots(figsize=(10, 6))
        
        # Age distribution by diabetes status
        age_diabetes = filtered_df.groupby(['age', 'diabetes_binary']).size().unstack(fill_value=0)
        
        age_diabetes.plot(kind='bar', ax=ax3, color=['lightblue', 'salmon'], width=0.8)
        ax3.set_title('Distribui√ß√£o de Casos por Faixa Et√°ria')
        ax3.set_xlabel('Faixa Et√°ria')
        ax3.set_ylabel('N√∫mero de Casos')
        ax3.legend(['Sem Diabetes', 'Com Diabetes'])
        ax3.tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        st.pyplot(fig3)
        plt.close(fig3)
    
    with col4:
        st.subheader("üî• Correla√ß√£o entre Indicadores")
        
        fig4, ax4 = plt.subplots(figsize=(10, 8))
        
        # Select numeric columns for correlation
        numeric_cols = filtered_df.select_dtypes(include=[np.number]).columns
        # Remove ID columns if present
        numeric_cols = [col for col in numeric_cols if 'id' not in col.lower()]
        
        if len(numeric_cols) > 1:
            correlation_matrix = filtered_df[numeric_cols].corr()
            
            # Create heatmap
            sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,
                       square=True, ax=ax4, fmt='.2f', cbar_kws={'shrink': 0.8})
            ax4.set_title('Matriz de Correla√ß√£o - Indicadores de Sa√∫de')
            
            plt.tight_layout()
            st.pyplot(fig4)
            plt.close(fig4)
        else:
            st.info("Dados insuficientes para matriz de correla√ß√£o.")
    
    # Row 3: Advanced Analysis
    st.markdown("---")
    st.subheader("üìà An√°lise Avan√ßada")
    
    col5, col6 = st.columns(2)
    
    with col5:
        st.subheader("üéª Distribui√ß√£o de BMI (Violin Plot)")
        
        fig5, ax5 = plt.subplots(figsize=(8, 6))
        
        # Prepare data for violin plot
        diabetes_labels = ['Sem Diabetes', 'Com Diabetes']
        bmi_no_diabetes = filtered_df[filtered_df['diabetes_binary'] == 0]['bmi'].values
        bmi_with_diabetes = filtered_df[filtered_df['diabetes_binary'] == 1]['bmi'].values
        
        # Check if we have enough data for violin plot
        if len(bmi_no_diabetes) > 5 and len(bmi_with_diabetes) > 5:
            bmi_data = [bmi_no_diabetes, bmi_with_diabetes]
            
            # Create violin plot
            parts = ax5.violinplot(bmi_data, positions=[0, 1], showmeans=True, showmedians=True)
            
            # Customize colors
            colors = ['lightblue', 'salmon']
            for i, pc in enumerate(parts['bodies']):
                pc.set_facecolor(colors[i])
                pc.set_alpha(0.7)
            
            ax5.set_xticks([0, 1])
            ax5.set_xticklabels(diabetes_labels)
            ax5.set_ylabel('BMI')
            ax5.set_title('Distribui√ß√£o de BMI por Status de Diabetes')
            ax5.grid(True, alpha=0.3)
        else:
            # Fallback to histogram if not enough data for violin plot
            if len(bmi_no_diabetes) > 0:
                ax5.hist(bmi_no_diabetes, alpha=0.7, label='Sem Diabetes', 
                        bins=min(20, max(5, len(bmi_no_diabetes)//3)), color='lightblue')
            if len(bmi_with_diabetes) > 0:
                ax5.hist(bmi_with_diabetes, alpha=0.7, label='Com Diabetes', 
                        bins=min(20, max(5, len(bmi_with_diabetes)//3)), color='salmon')
            
            ax5.set_xlabel('BMI')
            ax5.set_ylabel('Frequ√™ncia')
            ax5.set_title('Distribui√ß√£o de BMI por Status de Diabetes')
            ax5.legend()
            ax5.grid(True, alpha=0.3)
        
        st.pyplot(fig5)
        plt.close(fig5)
    
    with col6:
        st.subheader("üìã Resumo Estat√≠stico")
        
        # Statistical summary
        summary_stats = filtered_df.groupby('diabetes_binary')['bmi'].agg([
            'count', 'mean', 'std', 'min', 'max'
        ]).round(2)
        
        # Map index to labels (handle cases where one group might be missing)
        index_mapping = {0: 'Sem Diabetes', 1: 'Com Diabetes'}
        summary_stats.index = [index_mapping[i] for i in summary_stats.index]
        summary_stats.columns = ['Contagem', 'M√©dia', 'Desvio Padr√£o', 'M√≠nimo', 'M√°ximo']
        
        st.dataframe(summary_stats, use_container_width=True)
        
        # Additional insights
        st.markdown("**üí° Insights:**")
        
        # Only calculate BMI difference if both groups exist
        if 'Com Diabetes' in summary_stats.index and 'Sem Diabetes' in summary_stats.index:
            bmi_diff = summary_stats.loc['Com Diabetes', 'M√©dia'] - summary_stats.loc['Sem Diabetes', 'M√©dia']
            
            if bmi_diff > 0:
                st.write(f"‚Ä¢ Pessoas com diabetes t√™m BMI m√©dio {bmi_diff:.1f} pontos maior")
            else:
                st.write(f"‚Ä¢ Pessoas sem diabetes t√™m BMI m√©dio {abs(bmi_diff):.1f} pontos maior")
        else:
            st.write("‚Ä¢ Dados insuficientes para compara√ß√£o de BMI entre grupos")
        
        diabetes_percentage = (filtered_df['diabetes_binary'].sum() / len(filtered_df)) * 100
        st.write(f"‚Ä¢ {diabetes_percentage:.1f}% dos registros filtrados t√™m diabetes")
        
        if 'phys_activity' in filtered_df.columns:
            active_diabetes_rate = filtered_df[filtered_df['phys_activity'] == 1]['diabetes_binary'].mean() * 100
            inactive_diabetes_rate = filtered_df[filtered_df['phys_activity'] == 0]['diabetes_binary'].mean() * 100
            
            if active_diabetes_rate < inactive_diabetes_rate:
                st.write(f"‚Ä¢ Pessoas ativas t√™m {inactive_diabetes_rate - active_diabetes_rate:.1f}% menos diabetes")
    
    # Footer with data info
    st.markdown("---")
    st.caption(f"üìä An√°lise baseada em {len(filtered_df)} registros filtrados de {len(df)} registros totais")


def main():
    """Main application function."""
    # Show API status in sidebar
    show_api_status()
    
    # Navigation
    with st.sidebar:
        st.markdown("---")
        page = st.selectbox(
            "Navega√ß√£o",
            ["ü©∫ Predi√ß√£o de Diabetes", "üìä Gerenciamento de Dados", "üìà An√°lise de Dados"],
            key="page_selector"
        )
    
    # Route to appropriate page
    if page == "ü©∫ Predi√ß√£o de Diabetes":
        diabetes_prediction_form()
    elif page == "üìä Gerenciamento de Dados":
        data_management_page()
    elif page == "üìà An√°lise de Dados":
        data_analysis_page()


if __name__ == "__main__":
    main()