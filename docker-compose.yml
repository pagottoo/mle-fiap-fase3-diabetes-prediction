services:
  db:
    image: postgres:16-alpine
    container_name: diabetes_health_db
    environment:
      POSTGRES_DB: diabetes_health
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d diabetes_health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - diabetes_health_network

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: diabetes_health_api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/diabetes_health
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./ml/artifacts:/app/ml/artifacts
    networks:
      - diabetes_health_network
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    container_name: diabetes_health_app
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://api:8000
      - PYTHONPATH=/app
    depends_on:
      - api
      - model-init
    networks:
      - diabetes_health_network
    restart: unless-stopped

  # Automatic model initialization service
  model-init:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: diabetes_health_model_init
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/diabetes_health
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - diabetes_health_network
    command: python ml/init_model.py
    restart: "no"  # Run only once

volumes:
  postgres_data:
    driver: local

networks:
  diabetes_health_network:
    driver: bridge